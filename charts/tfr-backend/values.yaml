replicaCount: 1

image:
  repository: ghcr.io/thefittingroom/tfr-backend
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: c785115df2e0fafb4d00df44fc8bc717ea5a5d50

imagePullSecrets:
  - name: docker-registry
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: 'arn:aws:iam::602373492013:role/tfr-backend-dev'
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: tfr-backend

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  className: nginx-external
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "400m"
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* "^/users/(.*)/avatar" {
          deny all;
          return 403;
        }

      location ~* "^/colorways/(.*)/frames" {
          limit_except POST {
            deny all;
          }
        }
  hosts:
    - host: tfr.dev.thefittingroom.xyz
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

database:
  host: db.dev.thefittingroom.xyz
  port: 5432

redis:
  host: redis.dev.thefittingroom.xyz:6379

asynqmon:
  resources:
    requests:
      cpu: 300m
      memory: 100Mi
    limits:
      cpu: 300m
      memory: 1Gi
  image:
    repository: hibiken/asynqmon
    tag: 0.7.1
  ingress:
    className: nginx-external
    annotations:
      nginx.ingress.kubernetes.io/auth-url: "https://oauth2proxy.dev.thefittingroom.xyz/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: "https://oauth2proxy.dev.thefittingroom.xyz/oauth2/start?rd=$escaped_request_uri"
    hosts:
      - host: worker.dev.thefittingroom.xyz
        paths:
          - path: /
            pathType: ImplementationSpecific

api:
  resources:
    requests:
      cpu: 300m
      memory: 100Mi
    limits:
      cpu: 300m
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 75

worker:
  resources:
    requests:
      cpu: 300m
      memory: 100Mi
    limits:
      cpu: 300m
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 75

cronJobs:
  check-pending-avatars:
    enabled: true
    cron: "*/1 * * * *"   # run once a minute
    command: [CheckPendingAvatars]
    concurrencyPolicy: Forbid
    failedJobsHistoryLimit: 1
    env: []

externalSecrets:
  db:
    secretsManagerName: db
  twilio:
    secretsManagerName: twilio

env:
  S3_AVATAR_CREATION_BUCKET: avatar-creation-dev
  S3_AVATARS_BUCKET: tfr-avatars-dev
  S3_STYLES_BUCKET: styles-dev
  S3_ASSETS_BUCKET: tfr-assets-dev
  S3_RENDER_BUCKET: tfr-render-dev
  ASSETS_URL: https://assets.dev.thefittingroom.xyz
  VTO_FRAME_COUNT: "12"
  VTO_URL: http://virtual-try-on:8000
  AVATAR_URL: http://avatar:8000

nodeSelector: {}

tolerations: []

affinity: {}

environment: development
